#+TITLE: k8s cluster provision and setup
#+PROPERTY: header-args :tangle "setup.sh"

*   Terraform and update kubeconfig
#+begin_src bash
cd terraform
terraform apply -var-file=vars.tfvars -auto-approve
cd ..

aws eks --region eu-central-1 update-kubeconfig --name menu-test --profile spadmin
#+end_src
*   Create namespaces
**  create traefik namespace
#+begin_src bash
kubectl create namespace traefik
#+end_src
**  create argocd namespace
#+begin_src bash
kubectl create namespace argocd
#+end_src
**  create menu namespace
#+begin_src bash
kubectl create namespace menu
#+end_src
**  create monitoring namespace
#+begin_src bash
kubectl create namespace monitoring
#+end_src
*   Apply secrets
#+begin_src bash
kubectl apply -f secrets/
#+end_src
*   Traefik
** install through helm
***   add traefik chart
#+begin_src bash
helm repo add traefik https://helm.traefik.io/traefik
#+end_src
***   update chart repository
#+begin_src bash
helm repo update
#+end_src
***   install traefk
#+begin_src bash
helm install traefik traefik/traefik --values=helm/traefik/values.yml -n traefik
#+end_src
***   TODO point CNAME to traefik load balancer EXTERNAL-IP :tangle no
https://api.cloudflare.com/#dns-records-for-a-zone-patch-dns-record
#+begin_src
curl -X PATCH "https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0c353/dns_records/372e67954025e0ba6aaa6d586b9e0b59" \
     -H "X-Auth-Email: user@example.com" \
     -H "X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41" \
     -H "Content-Type: application/json" \
     --data '{"type":"A","name":"example.com","content":"127.0.0.1","ttl":3600,"proxied":false}'
#+end_src
*   Argocd
**  setup
*** install
#+begin_src bash
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
#+end_src
*** port forward :tangle no
#+begin_src
kubectl port-forward svc/argocd-server -n argocd 8080:443
#+end_src
*** Get admin pass :tangle no
#+begin_src
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
#+end_src
*** Login and change pass :tangle no
#+begin_src
argocd login localhost:8080
argocd account update-password
#+end_src
*   Menu
**   API
***  apply menu app manifests
#+begin_src bash
kubectl apply -f manifests/kubernetes-infrastructure/argocd/
#+end_src
***  apply menu ingress
#+begin_src bash
kubectl apply -f manifests/menu/api/ingress.yml
#+end_src

*   Monitoring
**  Prometheus Kube Stack :tangle no
manifest for docker images might be a better way to deploy
#+begin_src bash
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack --values=helm/kube-prometheus-stack/values.yml -n monitoring
#+end_src
**  Loki and Promtail :tangle no
#+begin_src bash
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
helm upgrade --install loki grafana/loki-stack -n monitoring
#+end_src

**  kube-state-metrics
#+begin_src bash
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts && helm repo update && helm install ksm prometheus-community/kube-state-metrics --set image.tag=v2.2.0 --namespace monitoring
#+end_src
**  Grafana Agent
**** install
#+begin_src bash
MANIFEST_URL=https://raw.githubusercontent.com/grafana/agent/v0.23.0/production/kubernetes/agent-bare.yaml NAMESPACE=monitoring /bin/sh -c "$(curl -fsSL https://raw.githubusercontent.com/grafana/agent/release/production/kubernetes/install-bare.sh)" | kubectl apply -f -
#+end_src
**** apply logs agent
#+begin_src bash
kubectl apply -f manifest/kubernetes-manifests/grafana-agent
#+end_src
**** rollout restart
#+begin_src bash
kubectl rollout restart deployment/grafana-agent -n monitoring
#+end_src
